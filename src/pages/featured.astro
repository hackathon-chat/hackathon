---
// src/pages/featured.astro
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import EventCard from '../components/EventCard.astro';
import MonthFilter from '../components/MonthFilter.astro';

// Safely load event data, filter out problematic files
async function loadEventsWithErrorHandling() {
  try {
    const allEvents = await getCollection('events');
    const validEvents = [];
    
    for (const event of allEvents) {
      try {
        // Validate required fields exist
        if (event.data && 
            event.data.title && 
            event.data.startDate && 
            event.data.eventType && 
            Array.isArray(event.data.eventType)) {
          
          // Validate date format
          const date = new Date(event.data.startDate);
          if (!isNaN(date.getTime())) {
            validEvents.push(event);
          } else {
            console.warn(`Invalid date in event: ${event.id}`);
          }
        } else {
          console.warn(`Missing required fields in event: ${event.id}`);
        }
      } catch (error) {
        console.warn(`Error processing event ${event.id}:`, error);
      }
    }
    
    return validEvents;
  } catch (error) {
    console.error('Error loading events collection:', error);
    return [];
  }
}

const allEvents = await loadEventsWithErrorHandling();

// Filter featured events
const featuredEvents = allEvents.filter(event => {
  try {
    return event.data && event.data.featured === true;
  } catch (error) {
    console.warn(`Error checking featured status for ${event.id}:`, error);
    return false;
  }
});

// Sort by time: events closer to now appear first
const sortedFeaturedEvents = featuredEvents.sort((a, b) => {
  try {
    const dateA = new Date(a.data.startDate);
    const dateB = new Date(b.data.startDate);
    const now = new Date();
    
    // Validate date validity
    if (isNaN(dateA.getTime()) || isNaN(dateB.getTime())) {
      return 0;
    }
    
    // Calculate distance from current time (absolute value)
    const diffA = Math.abs(dateA.getTime() - now.getTime());
    const diffB = Math.abs(dateB.getTime() - now.getTime());
    
    return diffA - diffB;
  } catch (error) {
    console.warn('Error sorting featured events:', error);
    return 0;
  }
});
---
<Layout title="Featured Events - Hackathon.chat">
  <MonthFilter currentCategory="featured" currentMonth={null} />
  <div class="events-grid">
    {sortedFeaturedEvents.map(event => {
      try {
        return <EventCard event={event} />;
      } catch (error) {
        console.warn(`Error rendering featured event card for ${event.id}:`, error);
        return null;
      }
    })}
  </div>
  {sortedFeaturedEvents.length === 0 && (
    <div class="no-events">
      <p>No featured events available at the moment.</p>
    </div>
  )}
</Layout>

<style>
  .events-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 24px;
    margin-top: 40px;
    position: relative;
    z-index: 1;
  }
  .no-events {
    text-align: center;
    padding: 60px 20px;
    color: var(--yt-text-secondary);
  }
</style>