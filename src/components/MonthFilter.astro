---
// src/components/MonthFilter.astro
import { getCollection } from 'astro:content';

const { currentCategory = null, currentMonth = null } = Astro.props;

// Get current date
const now = new Date();
const currentYear = now.getFullYear();
const currentMonthNum = now.getMonth() + 1; // getMonth() returns 0-11, need +1

// Generate next 6 months starting from current month (fixed rule, not affected by category)
const months = [];
const monthNames = ['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

for (let i = 0; i < 7; i++) { // Current month + next 6 months = 7 months
  const targetMonth = currentMonthNum + i;
  const year = currentYear + Math.floor((targetMonth - 1) / 12);
  const month = ((targetMonth - 1) % 12) + 1;
  
  // Determine if year should be displayed
  const displayName = year === currentYear ? monthNames[month] : `${monthNames[month]} ${year}`;
  
  months.push({
    name: displayName,
    value: month,
    year: year,
    yearMonth: `${year}-${month}`
  });
}

// Safely load event data for checking if a month has events
async function loadEventsWithErrorHandling() {
  try {
    const allEvents = await getCollection('events');
    const validEvents = [];
    
    for (const event of allEvents) {
      try {
        // Validate required fields exist
        if (event.data && 
            event.data.title && 
            event.data.startDate && 
            event.data.eventType && 
            Array.isArray(event.data.eventType)) {
          
          // Validate date format
          const date = new Date(event.data.startDate);
          if (!isNaN(date.getTime())) {
            validEvents.push(event);
          }
        }
      } catch (error) {
        console.warn(`Error processing event ${event.id} in MonthFilter:`, error);
      }
    }
    
    return validEvents;
  } catch (error) {
    console.error('Error loading events collection in MonthFilter:', error);
    return [];
  }
}

const allEvents = await loadEventsWithErrorHandling();

// Filter events by current category (if any)
let relevantEvents = allEvents;
try {
  if (currentCategory && currentCategory !== 'featured') {
    relevantEvents = allEvents.filter(event => {
      try {
        return event.data.eventType && 
               Array.isArray(event.data.eventType) &&
               event.data.eventType.some(type => type.toLowerCase() === currentCategory);
      } catch (error) {
        console.warn(`Error filtering by category for ${event.id}:`, error);
        return false;
      }
    });
  } else if (currentCategory === 'featured') {
    relevantEvents = allEvents.filter(event => {
      try {
        return event.data && event.data.featured === true;
      } catch (error) {
        console.warn(`Error checking featured status for ${event.id}:`, error);
        return false;
      }
    });
  }
} catch (error) {
  console.error('Error filtering events by category:', error);
  relevantEvents = allEvents;
}

// Check which months have events, only show months with events
const monthsWithEvents = months.filter(monthInfo => {
  try {
    return relevantEvents.some(event => {
      try {
        const eventDate = new Date(event.data.startDate);
        if (isNaN(eventDate.getTime())) return false;
        
        const eventYear = eventDate.getFullYear();
        const eventMonth = eventDate.getMonth() + 1;
        return eventYear === monthInfo.year && eventMonth === monthInfo.value;
      } catch (error) {
        console.warn(`Error checking event date for ${event.id}:`, error);
        return false;
      }
    });
  } catch (error) {
    console.warn(`Error checking events for month ${monthInfo.yearMonth}:`, error);
    return false;
  }
});

// Function to generate links
function generateLink(month = null) {
  try {
    if (currentCategory === 'featured') {
      // Featured page supports month filtering
      if (month) {
        return `/featured/month/${month}`;
      } else {
        return '/featured';
      }
    } else if (currentCategory && month) {
      // Convert currentCategory to URL-safe format
      const urlSafeCategory = currentCategory.replace(/\s+/g, '').replace(/\./g, '');
      return `/${urlSafeCategory}/month/${month}`;
    } else if (currentCategory) {
      // Convert currentCategory to URL-safe format
      const urlSafeCategory = currentCategory.replace(/\s+/g, '').replace(/\./g, '');
      return `/${urlSafeCategory}`;
    } else if (month) {
      return `/month/${month}`;
    } else {
      return '/';
    }
  } catch (error) {
    console.warn('Error generating link:', error);
    return '/';
  }
}
---
<div class="filter-bar-wrapper">
  <div class="filter-bar">
    <a href={generateLink()} class={`filter-chip ${!currentMonth ? 'active' : ''}`}>All</a>
    {months.map(month => (
      <a href={generateLink(month.value)} class={`filter-chip ${currentMonth === month.value ? 'active' : ''}`}>
        {month.name}
      </a>
    ))}
  </div>
</div>

<style>
  .filter-bar-wrapper {
    position: sticky;
    top: 60px;
    background-color: var(--yt-black);
    padding: 12px 0 24px 0;
    z-index: 999;
    margin: 0 -24px;
    padding-left: 24px;
    padding-right: 24px;
    background: var(--yt-black);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.8);
    opacity: 1;
  }
  
  .filter-bar-wrapper::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--yt-black);
    z-index: -1;
  }
  
  .filter-bar {
    display: flex;
    gap: 12px;
    position: relative;
    z-index: 1;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  
  .filter-bar::-webkit-scrollbar {
    display: none;
  }
  
  .filter-chip {
    display: inline-block;
    padding: 8px 16px;
    background-color: var(--yt-light-grey);
    color: var(--yt-text-primary);
    text-decoration: none;
    border-radius: 8px;
    white-space: nowrap;
    transition: background-color 0.2s;
    font-size: 0.9rem;
    font-weight: 500;
    flex-shrink: 0;
  }
  .filter-chip.active {
    background-color: var(--yt-text-primary);
    color: var(--yt-black);
  }
  .filter-chip:not(.active):hover {
    background-color: #505050;
  }
</style>